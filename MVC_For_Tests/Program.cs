//Создает экземпляр WebApplicationBuilder, который предоставляет механизмы для конфигурации приложения перед его запуском.
//args передается в этот метод для того, чтобы можно было, например, использовать аргументы командной строки при конфигурировании приложения.
using MVC_For_Tests.Services;

var builder = WebApplication.CreateBuilder(args);

//Добавляет в контейнер служб поддержку контроллеров и представлений.
//Это необходимо для MVC-приложений, где используются контроллеры для обработки HTTP-запросов и представления для генерации HTML-ответов.
builder.Services.AddControllersWithViews();

//Здесь можно регистрировать другие зависимости, которые в последствии можно использовать в контроллерах или других частях приложения.
//Например
builder.Services.AddScoped<IMessageService, MessageService>();

//Строит и возвращает объект WebApplication, который представляет собой сконфигурированное веб-приложение. В этот момент приложение готово к запуску, но сервер еще не запущен.
var app = builder.Build();
//Этот блок конфигурирует обработку исключений и настройки HTTP Strict Transport Security (HSTS) для продакшн-среды (не для разработки).
//app.UseExceptionHandler("/Home/Error"): Настраивает обработчик исключений, который перенаправляет пользователя на указанный URL в случае возникновения ошибки.
//app.UseHsts(): Включает HSTS, который заставляет клиенты использовать HTTPS вместо HTTP.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

//Включает промежуточное ПО (middleware), которое автоматически перенаправляет HTTP-запросы на HTTPS.
app.UseHttpsRedirection();
//Включает поддержку обслуживания статических файлов, таких как CSS, JavaScript и изображения, из wwwroot.
app.UseStaticFiles();
//Включает маршрутизацию, которая позволяет приложению определять маршруты и направлять входящие запросы к соответствующим обработчикам.
app.UseRouting();
//Добавляет поддержку авторизации, позволяя определять и применять политики доступа к ресурсам приложения.
app.UseAuthorization();
//Определяет маршрут по умолчанию для MVC-контроллеров. Этот маршрут интерпретирует URL-адреса, соответствующие шаблону "{controller=Home}/{action=Index}/{id?}",
//где controller и action могут быть заменены на имена соответствующих контроллера и действия. {id?} указывает на необязательный параметр id.
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");
//Запускает веб-приложение, заставляя его начать обрабатывать входящие HTTP-запросы.
app.Run();
